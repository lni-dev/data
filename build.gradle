plugins {
    id 'java'
    id 'maven-publish'
    id 'java-library'
    id 'signing'
}

group = 'io.github.lni-dev' //noinspection GroovyUnusedAssignment
archivesBaseName = "data"
version =  '2.0.19'

//noinspection GroovyUnusedAssignment
targetCompatibility = JavaVersion.VERSION_1_9 //noinspection GroovyUnusedAssignment
sourceCompatibility = JavaVersion.VERSION_1_9

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
}


javadoc {
    options.encoding = 'UTF-8'
    //options.addStringOption('Xdoclint:none', '-quiet')
    title = "Data Json Parser"

    configure(options) {
        tags(
                'implNote:a:Implementation Note:',
                'implSpec:a:Implemenatation Requirements:',
                'apiNote:a:API Note:'
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {

    repositories {
        maven {
            if(project.hasProperty("ossrhUsername") && project.hasProperty("ossrhPassword")){
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }

            }else {
                project.logger.lifecycle("no OSSRH username and password given. Cannot deploy.")
            }

        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = 'data'
            from components.java
            pom {
                name = 'data'
                description = 'A Java Library to store data and parse it to JSON'
                url = 'https://lni-dev.github.io/'
                groupId = 'io.github.lni-dev'
                version = project.version

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'linusdev'
                        name = 'LinusDev'
                        email = 'einsuperlinus@gmail.com'
                        organizationUrl = 'https://lni-dev.github.io/'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/lni-dev/data.git'
                    developerConnection ='scm:git:ssh://github.com:lni-dev/data.git'
                    url = 'https://github.com/lni-dev/data/tree/master'
                }
            }
        }
    }
}

signing {
    if(project.hasProperty("signing.keyId") && project.hasProperty("signing.password") && project.hasProperty("signing.secretKeyRingFile")){
        sign publishing.publications.mavenJava
    }else {
        project.logger.lifecycle("No Signing information given. Cannot sign.")
    }
}

